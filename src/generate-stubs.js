var fs = require( 'fs' ),
    path = require( 'path' ),
    util = require( 'util' );

process.env.NODE_CURL_INCLUDE_PATH = 'E:/devel/includes';

var files = [
    process.env.NODE_CURL_INCLUDE_PATH ? path.join( process.env.NODE_CURL_INCLUDE_PATH, 'curl', 'curl.h' ) : '',
    '/usr/local/include/curl/curl.h',
    '/usr/include/curl/curl.h',
    '/usr/include/curl/curl.h'
];

var curlHeaderFile = '',
    EOL = ( process.platform === 'win32' ? '\r\n' : '\n' );

files.forEach(function ( file ) {

    if ( fs.existsSync( file ) ) {

        curlHeaderFile = file;
        return true;
    }
});

if ( !curlHeaderFile ) {

    console.log( "Cannot find curl's header file." );
    process.exit(1);
}

var currentDate = new Date();

currentDate = currentDate.getDate() + "/"
    + (currentDate.getMonth()+1)  + "/"
    + currentDate.getFullYear() + " @ "
    + currentDate.getHours() + ":"
    + currentDate.getMinutes() + ":"
    + currentDate.getSeconds();

function generateHeaderFile( scope, fileName, pattern, prefix ) {

    var matches = [],
        match = [],
        matchesStrings = [];

    while ( match = pattern.exec( curlHeaderContent ) ) {

        matches.push( match[1] );
    }

    matches.sort();

    matches.forEach( function ( item ) {
        matchesStrings.push( '\t{"' + item + '", CURL' + prefix + '_' + item + '},' );
    });

    var file = path.join( __dirname, 'generated-stubs', fileName ),
        toWrite = [
            '// generated by ' + __filename + ' at ' + currentDate,
            'CurlOption ' + fileName.split( '.' )[0] + '[] = {',
            matchesStrings.join( EOL ),
            '};'
        ];

    fs.writeFileSync( file, toWrite.join( EOL ) );

}

var curlHeaderContent = fs.readFileSync( curlHeaderFile, 'utf8' );

generateHeaderFile( curlHeaderContent, 'integer_options.h', /CINIT\((\w+).*LONG/g, 'OPT' );
generateHeaderFile( curlHeaderContent, 'string_options.h', /CINIT\((\w+).*OBJECT/g, 'OPT' );

generateHeaderFile( curlHeaderContent, 'integer_infos.h', /CURLINFO_(\w+).*LONG/g, 'INFO' );
generateHeaderFile( curlHeaderContent, 'string_infos.h', /CURLINFO_(\w+).*STRING/g, 'INFO' );
generateHeaderFile( curlHeaderContent, 'double_infos.h', /CURLINFO_(\w+).*DOUBLE/g, 'INFO' );
