var fs = require( 'fs' ),
    path = require( 'path' ),
    util = require( 'util' );

var files = [
    process.env.NODE_CURL_INCLUDE_PATH ? path.join( process.env.NODE_CURL_INCLUDE_PATH, 'curl', 'curl.h' ) : '',
    '/usr/local/include/curl/curl.h',
    '/usr/include/curl/curl.h',
    '/usr/include/curl/curl.h'
];

//add path to deps only on Windows
if ( process.platform == 'win32' )
    files.push( path.resolve( __dirname, '..', 'deps', 'curl-for-windows', 'curl', 'include', 'curl', 'curl.h'  ) );

var curlHeaderFile = '',
    EOL = ( process.platform === 'win32' ? '\r\n' : '\n' );

files.forEach(function ( file ) {

    if ( fs.existsSync( file ) ) {

        curlHeaderFile = file;
        return true;
    }
});

if ( !curlHeaderFile ) {

    console.log( "Cannot find curl's header file." );
    process.exit(1);
}

var currentDate = new Date();

currentDate = currentDate.getDate() + "/"
    + (currentDate.getMonth()+1)  + "/"
    + currentDate.getFullYear() + " @ "
    + currentDate.getHours() + ":"
    + currentDate.getMinutes() + ":"
    + currentDate.getSeconds();

var curlHeaderContent = fs.readFileSync( curlHeaderFile, 'utf8' );

generateFiles( curlHeaderContent, 'curlOptionsInteger', /CINIT\((\w+).*LONG/g, 'OPT', 'option' );
generateFiles( curlHeaderContent, 'curlOptionsString', /CINIT\((\w+).*OBJECT/g, 'OPT', 'option' );

generateFiles( curlHeaderContent, 'curlInfosInteger', /CURLINFO_(\w+).*LONG/g, 'INFO', 'info' );
generateFiles( curlHeaderContent, 'curlInfosString', /CURLINFO_(\w+).*STRING/g, 'INFO', 'info' );
generateFiles( curlHeaderContent, 'curlInfosDouble', /CURLINFO_(\w+).*DOUBLE/g, 'INFO', 'info' );

function generateFiles( scope, fileName, pattern, prefix, jsObject ) {

    var matches = [],
        match = [];

    while ( match = pattern.exec( curlHeaderContent ) ) {

        matches.push( match[1] );
    }

    matches.sort();

    generateHeaderFile( fileName + '.h', prefix, matches );
    generateJavascriptFile( fileName + '.js', jsObject, matches );

}

function generateJavascriptFile( fileName, jsObject, regexMatches ) {

    var file = path.resolve( __dirname, '..', 'lib', 'generated-stubs', fileName ),
        toWrite,
        obj = {};

    regexMatches.forEach( function ( item ) {
        obj[item] = 0;
    });

    toWrite = [
        '// generated by ' + __filename + ' at ' + currentDate + EOL,
        'Curl.' + jsObject + ' = ' + JSON.stringify( obj ) + ';'
    ];

    fs.writeFileSync( file, toWrite.join( '' ) );

}

function generateHeaderFile( fileName, prefix, regexMatches ) {

    var headerSafe = fileName.toUpperCase().replace( '.', '_' ),
        file = path.resolve( __dirname, '..', 'src', 'generated-stubs', fileName ),
        content = [],
        toWrite;

    regexMatches.forEach( function ( item ) {
        content.push( '\t{"' + item + '", CURL' + prefix + '_' + item + '},' );
    });

    toWrite = [
        '// generated by ' + __filename + ' at ' + currentDate,
        '#ifndef ' + headerSafe,
        '#define ' + headerSafe,
        'Curl::CurlOption ' + fileName.split( '.' )[0] + '[] = {',
        content.join( EOL ).slice( 0, -1 ), //remove last comma
        '};',
        '#endif'
    ];

    fs.writeFileSync( file, toWrite.join( EOL ) );

}
